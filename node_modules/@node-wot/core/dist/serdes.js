"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.serializeTD = exports.parseTD = exports.setContextLanguage = void 0;
const TD = __importStar(require("./thing-description"));
const logger_1 = require("./logger");
const isAbsoluteUrl = require("is-absolute-url");
const URLToolkit = require("url-toolkit");
const { debug, warn } = (0, logger_1.createLoggers)("core", "serdes");
function adjustAffordanceField(thing, affordanceKey) {
    const affordance = thing[affordanceKey];
    if (typeof affordance !== "object" || affordance == null) {
        thing[affordanceKey] = {};
    }
}
function adjustBooleanField(affordance, key) {
    const currentValue = affordance[key];
    if (currentValue === undefined || typeof currentValue !== "boolean") {
        affordance[key] = false;
    }
}
function setContextLanguage(thing, language, forceOverride) {
    if (Array.isArray(thing["@context"])) {
        const arrayContext = thing["@context"];
        let languageSet = false;
        for (const arrayEntry of arrayContext) {
            if (typeof arrayEntry === "object") {
                if (arrayEntry["@language"] !== undefined) {
                    if (forceOverride) {
                        arrayEntry["@language"] = language;
                    }
                    languageSet = true;
                }
            }
        }
        if (!languageSet) {
            arrayContext.push({
                "@language": language,
            });
        }
    }
}
exports.setContextLanguage = setContextLanguage;
function parseTD(td, normalize) {
    var _a, _b, _c, _d, _e;
    debug(`parseTD() parsing\n\`\`\`\n${td}\n\`\`\``);
    const thing = JSON.parse(td.replace(/^\uFEFF/, ""));
    if (thing["@context"] === undefined) {
        thing["@context"] = [TD.DEFAULT_CONTEXT_V1, TD.DEFAULT_CONTEXT_V11];
    }
    else if (Array.isArray(thing["@context"])) {
        let semContext = thing["@context"];
        const indexV1 = semContext.indexOf(TD.DEFAULT_CONTEXT_V1);
        const indexV11 = semContext.indexOf(TD.DEFAULT_CONTEXT_V11);
        if (indexV1 === -1 && indexV11 === -1) {
            semContext.unshift(TD.DEFAULT_CONTEXT_V11);
            semContext.unshift(TD.DEFAULT_CONTEXT_V1);
        }
        else {
            if (indexV1 !== -1 && indexV11 !== -1) {
                semContext = semContext.filter(function (e) {
                    return e !== TD.DEFAULT_CONTEXT_V1;
                });
                semContext = semContext.filter(function (e) {
                    return e !== TD.DEFAULT_CONTEXT_V11;
                });
                semContext.unshift(TD.DEFAULT_CONTEXT_V11);
                semContext.unshift(TD.DEFAULT_CONTEXT_V1);
            }
            else {
                if (indexV1 !== -1 && indexV1 !== 0) {
                    semContext = semContext.filter(function (e) {
                        return e !== TD.DEFAULT_CONTEXT_V1;
                    });
                    semContext.unshift(TD.DEFAULT_CONTEXT_V1);
                }
                if (indexV11 !== -1 && indexV11 !== 0) {
                    semContext = semContext.filter(function (e) {
                        return e !== TD.DEFAULT_CONTEXT_V11;
                    });
                    semContext.unshift(TD.DEFAULT_CONTEXT_V11);
                }
            }
            thing["@context"] = semContext;
        }
    }
    else if (thing["@context"] !== TD.DEFAULT_CONTEXT_V1 && thing["@context"] !== TD.DEFAULT_CONTEXT_V11) {
        const semContext = thing["@context"];
        thing["@context"] = [TD.DEFAULT_CONTEXT_V1, TD.DEFAULT_CONTEXT_V11, semContext];
    }
    setContextLanguage(thing, TD.DEFAULT_CONTEXT_LANGUAGE, false);
    if (thing["@type"] === undefined) {
        thing["@type"] = TD.DEFAULT_THING_TYPE;
    }
    else if (Array.isArray(thing["@type"])) {
        const semTypes = thing["@type"];
        if (semTypes.indexOf(TD.DEFAULT_THING_TYPE) === -1) {
            semTypes.unshift(TD.DEFAULT_THING_TYPE);
        }
    }
    else if (thing["@type"] !== TD.DEFAULT_THING_TYPE) {
        const semType = thing["@type"];
        thing["@type"] = [TD.DEFAULT_THING_TYPE, semType];
    }
    for (const property of Object.values((_a = thing.properties) !== null && _a !== void 0 ? _a : {})) {
        for (const key of ["readOnly", "writeOnly", "observable"]) {
            adjustBooleanField(property, key);
        }
    }
    for (const action of Object.values((_b = thing.actions) !== null && _b !== void 0 ? _b : {})) {
        for (const key of ["safe", "idempotent"]) {
            adjustBooleanField(action, key);
        }
    }
    for (const affordanceKey of ["properties", "actions", "events"]) {
        adjustAffordanceField(thing, affordanceKey);
    }
    if (thing.security === undefined) {
        warn("parseTD() found no security metadata");
    }
    if (typeof thing.security === "string") {
        thing.security = [thing.security];
    }
    const allForms = [];
    for (const [propName, prop] of Object.entries((_c = thing.properties) !== null && _c !== void 0 ? _c : {})) {
        if (prop.forms == null) {
            throw new Error(`Property '${propName}' has no forms field`);
        }
        for (const form of prop.forms) {
            if (!form.href) {
                throw new Error(`Form of Property '${propName}' has no href field`);
            }
            if (!isAbsoluteUrl(form.href) && thing.base == null)
                throw new Error(`Form of Property '${propName}' has relative URI while TD has no base field`);
            allForms.push(form);
        }
    }
    for (const [actName, act] of Object.entries((_d = thing.actions) !== null && _d !== void 0 ? _d : {})) {
        if (act.forms == null) {
            throw new Error(`Action '${actName}' has no forms field`);
        }
        for (const form of act.forms) {
            if (!form.href) {
                throw new Error(`Form of Action '${actName}' has no href field`);
            }
            if (!isAbsoluteUrl(form.href) && thing.base == null)
                throw new Error(`Form of Action '${actName}' has relative URI while TD has no base field`);
            allForms.push(form);
        }
    }
    for (const [evtName, evt] of Object.entries((_e = thing.events) !== null && _e !== void 0 ? _e : {})) {
        if (evt.forms == null) {
            throw new Error(`Event '${evtName}' has no forms field`);
        }
        for (const form of evt.forms) {
            if (!form.href) {
                throw new Error(`Form of Event '${evtName}' has no href field`);
            }
            if (!isAbsoluteUrl(form.href) && thing.base == null)
                throw new Error(`Form of Event '${evtName}' has relative URI while TD has no base field`);
            allForms.push(form);
        }
    }
    if (Object.prototype.hasOwnProperty.call(thing, "base")) {
        if (normalize === undefined || normalize === true) {
            debug("parseTD() normalizing 'base' into 'forms'");
            for (const form of allForms) {
                if (!form.href.match(/^([a-z0-9+-.]+:).+/i)) {
                    debug(`parseTDString() applying base '${thing.base}' to '${form.href}'`);
                    form.href = URLToolkit.buildAbsoluteURL(thing.base, form.href);
                }
            }
        }
    }
    return thing;
}
exports.parseTD = parseTD;
function serializeTD(thing) {
    var _a;
    const copy = JSON.parse(JSON.stringify(thing));
    if (copy.security == null || copy.security.length === 0) {
        copy.securityDefinitions = {
            nosec_sc: { scheme: "nosec" },
        };
        copy.security = ["nosec_sc"];
    }
    if (((_a = copy.forms) === null || _a === void 0 ? void 0 : _a.length) === 0) {
        delete copy.forms;
    }
    if (copy.properties != null && Object.keys(copy.properties).length === 0) {
        delete copy.properties;
    }
    else if (copy.properties != null) {
        for (const property of Object.values(copy.properties)) {
            for (const key of ["readOnly", "writeOnly", "observable"]) {
                adjustBooleanField(property, key);
            }
        }
    }
    if (copy.actions != null && Object.keys(copy.actions).length === 0) {
        delete copy.actions;
    }
    else if (copy.actions != null) {
        for (const action of Object.values(copy.actions)) {
            for (const key of ["safe", "idempotent"]) {
                adjustBooleanField(action, key);
            }
        }
    }
    if (copy.events != null && Object.keys(copy.events).length === 0) {
        delete copy.events;
    }
    if ((copy === null || copy === void 0 ? void 0 : copy.links.length) === 0) {
        delete copy.links;
    }
    const td = JSON.stringify(copy);
    return td;
}
exports.serializeTD = serializeTD;
//# sourceMappingURL=serdes.js.map