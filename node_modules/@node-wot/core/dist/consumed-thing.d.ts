import { ConsumedThing as IConsumedThing, InteractionInput, Subscription } from "wot-typescript-definitions";
import { Form, Thing, ThingInteraction, SecurityScheme } from "./thing-description";
import { ThingModel } from "wot-thing-model-types";
import Servient from "./servient";
import { ProtocolClient } from "./protocol-interfaces";
import { ActionElement, EventElement, PropertyElement } from "wot-thing-description-types";
declare enum Affordance {
    PropertyAffordance = 0,
    ActionAffordance = 1,
    EventAffordance = 2
}
export interface ClientAndForm {
    client: ProtocolClient;
    form?: Form;
}
export default class ConsumedThing extends Thing implements IConsumedThing {
    #private;
    properties: {
        [key: string]: PropertyElement;
    };
    actions: {
        [key: string]: ActionElement;
    };
    events: {
        [key: string]: EventElement;
    };
    private subscribedEvents;
    private observedProperties;
    constructor(servient: Servient, thingModel?: ThingModel);
    getThingDescription(): WoT.ThingDescription;
    emitEvent(name: string, data: InteractionInput): void;
    extendInteractions(): void;
    findForm(forms: Array<Form>, op: string, affordance: Affordance, schemes: string[], idx: number): Form | undefined;
    getSecuritySchemes(security: Array<string>): Array<SecurityScheme>;
    ensureClientSecurity(client: ProtocolClient, form: Form | undefined): void;
    getClientFor(forms: Array<Form>, op: string, affordance: Affordance, options?: WoT.InteractionOptions): ClientAndForm;
    readProperty(propertyName: string, options?: WoT.InteractionOptions): Promise<WoT.InteractionOutput>;
    private handleInteractionOutput;
    _readProperties(propertyNames: string[]): Promise<WoT.PropertyReadMap>;
    readAllProperties(options?: WoT.InteractionOptions): Promise<WoT.PropertyReadMap>;
    readMultipleProperties(propertyNames: string[], options?: WoT.InteractionOptions): Promise<WoT.PropertyReadMap>;
    writeProperty(propertyName: string, value: WoT.InteractionInput, options?: WoT.InteractionOptions): Promise<void>;
    writeMultipleProperties(valueMap: WoT.PropertyWriteMap, options?: WoT.InteractionOptions): Promise<void>;
    invokeAction(actionName: string, parameter?: InteractionInput, options?: WoT.InteractionOptions): Promise<WoT.InteractionOutput>;
    observeProperty(name: string, listener: WoT.WotListener, errorListener?: WoT.ErrorListener, options?: WoT.InteractionOptions): Promise<Subscription>;
    subscribeEvent(name: string, listener: WoT.WotListener, errorListener?: WoT.ErrorListener, options?: WoT.InteractionOptions): Promise<Subscription>;
    handleUriVariables(ti: ThingInteraction, form: Form, options?: WoT.InteractionOptions): Form;
}
export {};
